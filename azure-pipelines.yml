trigger:
  branches:
    include:
    - master
  tags:
    include:
    - 0.*

pr:
  autoCancel: true
  branches:
    include:
      - master

schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build for master
  branches:
    include:
    - master
  always: true

stages:
  - stage: Test
    jobs:
      - job: TestsForGMSO
        strategy:
          matrix:
            Python36Ubuntu:
              imageName: 'ubuntu-latest'
              python.version: 3.6
            Python37Ubuntu:
              imageName: 'ubuntu-latest'
              python.version: 3.7
            Python38Ubuntu:
              imageName: 'ubuntu-latest'
              python.version: 3.8
            Python36macOS:
              imageName: 'macOS-latest'
              python.version: 3.6
            Python37macOS:
              imageName: 'macOS-latest'
              python.version: 3.7
            Python38macOS:
              imageName: 'macOS-latest'
              python.version: 3.8

        pool:
          vmImage: $(imageName)

        steps:
          - bash: echo "##vso[task.prependpath]$CONDA/bin"
            displayName: Add conda to path

          - bash: sudo chown -R $USER $CONDA
            condition: eq( variables['Agent.OS'], 'Darwin' )
            displayName: Take ownership of conda installation

          - bash: |
              conda config --set always_yes yes --set changeps1 no
              conda config --add channels omnia
              conda config --add channels conda-forge
              conda update conda -yq
            displayName: Add relevant channels

          - bash: |
              conda create -n test-environment
              source activate test-environment
              conda install --yes python=$(python.version) --file requirements-test.txt
              pip install -e .
            displayName: Install requirements and testing branch

          - bash: |
              source activate test-environment
              pip install pytest-azurepipelines
              python -m pytest -v --cov=gmso --cov-report=html --pyargs gmso --no-coverage-upload
            displayName: Run tests

          - bash: |
              source activate test-environment
              bash <(curl -s https://codecov.io/bash) -C $(Build.SourceVersion)
            condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['python.version'], '3.7' ) )
            displayName: Upload coverage report to codecov.io

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
            condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['python.version'], '3.7' ) )
            displayName: Publish coverage report to Azure dashboard

  - stage: Docker
    dependsOn: Test
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/tags/0')), ne(variables['Build.Reason'], 'Schedule'))
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: publishDocker
        steps:
          - bash: |
              if [[ $BUILD_SOURCEBRANCH == "refs/heads/master" ]]; then TAG='latest'; else TAG='stable'; fi
              if [[ $BUILD_SOURCEBRANCH != "refs/heads/master" ]]; then VERSION=$(Build.SourceBranch); fi;
              echo "##vso[task.setvariable variable=VERSION;]${VERSION:10}"
              echo "##vso[task.setvariable variable=DOCKER_TAG;]$TAG"
            displayName: Export Docker Tags
          - task: Docker@2
            displayName: Login to docker hub
            inputs:
              command: login
              containerRegistry: mosdefDockerLogin

          - task: Docker@2
            displayName: Build and Push
            inputs:
              command: buildAndPush
              repository: mosdef/gmso
              tags: |
                $(DOCKER_TAG)
                $(VERSION)
          - task: Docker@2
            displayName: Logout
            inputs:
              command: logout
              containerRegistry: mosdefDockerLogin
